require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/workshop_facilitators', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # WorkshopFacilitator. As you add validations to WorkshopFacilitator, be sure to
  # adjust the attributes here as well.

  before(:each) do
    @workshop_1 = FactoryBot.create(:workshop)
    @facilitator_1 = FactoryBot.create(:facilitator)
  end

  let(:valid_attributes) do
    { workshop_id: @workshop_1.id, facilitator_id: @facilitator_1.id }
  end

  context 'as a logged in facilitator' do
    before(:each) { login_as(FactoryBot.create(:facilitator)) }

    describe 'GET /index' do
      it 'renders a successful response' do
        WorkshopFacilitator.create! valid_attributes
        get workshop_facilitators_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        workshop_facilitator = WorkshopFacilitator.create! valid_attributes
        get workshop_facilitator_url(workshop_facilitator)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_workshop_facilitator_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a successful response' do
        workshop_facilitator = WorkshopFacilitator.create! valid_attributes
        get edit_workshop_facilitator_url(workshop_facilitator)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new WorkshopFacilitator' do
          expect {
            post workshop_facilitators_url,
                 params: {
                   workshop_facilitator: valid_attributes
                 }
          }.to change(WorkshopFacilitator, :count).by(1)
        end

        it 'redirects to the created workshop_facilitator' do
          post workshop_facilitators_url,
               params: {
                 workshop_facilitator: valid_attributes
               }
          expect(response).to redirect_to(
            workshop_facilitator_url(WorkshopFacilitator.last)
          )
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested workshop_facilitator' do
        workshop_facilitator = WorkshopFacilitator.create! valid_attributes
        expect {
          delete workshop_facilitator_url(workshop_facilitator)
        }.to change(WorkshopFacilitator, :count).by(-1)
      end

      it 'redirects to the workshop_facilitators list' do
        workshop_facilitator = WorkshopFacilitator.create! valid_attributes
        delete workshop_facilitator_url(workshop_facilitator)
        expect(response).to redirect_to(workshop_facilitators_url)
      end
    end
  end
end
