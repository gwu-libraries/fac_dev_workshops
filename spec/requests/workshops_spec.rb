require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/workshops', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Workshop. As you add validations to Workshop, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'A Valid Workshop Title',
      description: 'A valid workshop description',
      start_time: DateTime.now - 1.hours,
      end_time: DateTime.now + 1.hours
    }
  end

  context 'as a logged in facilitator' do
    before(:each) { login_as(FactoryBot.create(:facilitator)) }

    describe 'GET /index' do
      it 'renders a successful response' do
        Workshop.create! valid_attributes
        get workshops_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        workshop = Workshop.create! valid_attributes
        get workshop_url(workshop)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_workshop_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a successful response' do
        workshop = Workshop.create! valid_attributes
        get edit_workshop_url(workshop)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new Workshop' do
          expect {
            post workshops_url, params: { workshop: valid_attributes }
          }.to change(Workshop, :count).by(1)
        end

        it 'redirects to the created workshop' do
          post workshops_url, params: { workshop: valid_attributes }
          expect(response).to redirect_to(workshop_url(Workshop.last))
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) { { title: 'My New Workshop Title' } }

        it 'updates the requested workshop' do
          workshop = Workshop.create! valid_attributes
          patch workshop_url(workshop), params: { workshop: new_attributes }
          workshop.reload
          expect(workshop.title).to eq('My New Workshop Title')
        end

        it 'redirects to the workshop' do
          workshop = Workshop.create! valid_attributes
          patch workshop_url(workshop), params: { workshop: new_attributes }
          workshop.reload
          expect(response).to redirect_to(workshop_url(workshop))
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested workshop' do
        workshop = Workshop.create! valid_attributes
        expect { delete workshop_url(workshop) }.to change(Workshop, :count).by(
          -1
        )
      end

      it 'redirects to the workshops list' do
        workshop = Workshop.create! valid_attributes
        delete workshop_url(workshop)
        expect(response).to redirect_to(workshops_url)
      end
    end
  end
end
