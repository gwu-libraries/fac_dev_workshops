require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/track_workshops', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # TrackWorkshop. As you add validations to TrackWorkshop, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @workshop_1 = FactoryBot.create(:workshop)
    @track_1 = FactoryBot.create(:track)
  end

  let(:valid_attributes) do
    { workshop_id: @workshop_1.id, track_id: @track_1.id }
  end

  context 'as a logged in facilitator' do
    before(:each) { login_as(FactoryBot.create(:facilitator)) }

    describe 'GET /index' do
      it 'renders a successful response' do
        TrackWorkshop.create! valid_attributes
        get track_workshops_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        track_workshop = TrackWorkshop.create! valid_attributes
        get track_workshop_url(track_workshop)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_track_workshop_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a successful response' do
        track_workshop = TrackWorkshop.create! valid_attributes
        get edit_track_workshop_url(track_workshop)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new TrackWorkshop' do
          expect {
            post track_workshops_url,
                 params: {
                   track_workshop: valid_attributes
                 }
          }.to change(TrackWorkshop, :count).by(1)
        end

        it 'redirects to the created track_workshop' do
          post track_workshops_url, params: { track_workshop: valid_attributes }
          expect(response).to redirect_to(
            track_workshop_url(TrackWorkshop.last)
          )
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested track_workshop' do
        track_workshop = TrackWorkshop.create! valid_attributes
        expect { delete track_workshop_url(track_workshop) }.to change(
          TrackWorkshop,
          :count
        ).by(-1)
      end

      it 'redirects to the track_workshops list' do
        track_workshop = TrackWorkshop.create! valid_attributes
        delete track_workshop_url(track_workshop)
        expect(response).to redirect_to(track_workshops_url)
      end
    end
  end
end
