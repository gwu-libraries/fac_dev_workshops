require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/participants', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Participant. As you add validations to Participant, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'Sandwich P. Kitty', email: 'email@example.com' }
  end

  context 'as a signed in facilitator' do
    before(:each) { login_as(FactoryBot.create(:facilitator)) }

    describe 'GET /index' do
      it 'renders a successful response' do
        Participant.create! valid_attributes
        get participants_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        participant = Participant.create! valid_attributes
        get participant_url(participant)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_participant_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a successful response' do
        participant = Participant.create! valid_attributes
        get edit_participant_url(participant)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new Participant' do
          expect {
            post participants_url, params: { participant: valid_attributes }
          }.to change(Participant, :count).by(1)
        end

        it 'redirects to the created participant' do
          post participants_url, params: { participant: valid_attributes }
          expect(response).to redirect_to(participant_url(Participant.last))
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) { { email: 'mynewemail@example.com' } }

        it 'updates the requested participant' do
          participant = Participant.create! valid_attributes
          patch participant_url(participant),
                params: {
                  participant: new_attributes
                }
          participant.reload
          expect(participant.email).to eq('mynewemail@example.com')
        end

        it 'redirects to the participant' do
          participant = Participant.create! valid_attributes
          patch participant_url(participant),
                params: {
                  participant: new_attributes
                }
          participant.reload
          expect(response).to redirect_to(participant_url(participant))
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested participant' do
        participant = Participant.create! valid_attributes
        expect { delete participant_url(participant) }.to change(
          Participant,
          :count
        ).by(-1)
      end

      it 'redirects to the participants list' do
        participant = Participant.create! valid_attributes
        delete participant_url(participant)
        expect(response).to redirect_to(participants_url)
      end
    end
  end
end
